/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/rest/api/3/field": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get fields
         * @description Returns system and custom issue fields according to the following rules:
         *
         *      *  Fields that cannot be added to the issue navigator are always returned.
         *      *  Fields that cannot be placed on an issue screen are always returned.
         *      *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.
         *      *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)
         *
         *     This operation can be accessed anonymously.
         *
         *     **[Permissions](#permissions) required:** None.
         */
        get: operations["getFields"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/api/3/search/jql": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for issues using JQL enhanced search (GET)
         * @description Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned search results. If you need [read-after-write](https://developer.atlassian.com/cloud/jira/platform/search-and-reconcile/) consistency, you can utilize the `reconcileIssues` parameter to ensure stronger consistency assurances. This operation can be accessed anonymously.
         *
         *     If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.
         *
         *     **[Permissions](#permissions) required:** Issues are included in the response where the user has:
         *
         *      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         */
        get: operations["searchAndReconsileIssuesUsingJql"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AvatarUrlsBean: {
            /**
             * Format: uri
             * @description The URL of the item's 16x16 pixel avatar.
             */
            "16x16"?: string;
            /**
             * Format: uri
             * @description The URL of the item's 24x24 pixel avatar.
             */
            "24x24"?: string;
            /**
             * Format: uri
             * @description The URL of the item's 32x32 pixel avatar.
             */
            "32x32"?: string;
            /**
             * Format: uri
             * @description The URL of the item's 48x48 pixel avatar.
             */
            "48x48"?: string;
        };
        /** @description A change item. */
        ChangeDetails: {
            /** @description The name of the field changed. */
            readonly field?: string;
            /** @description The ID of the field changed. */
            readonly fieldId?: string;
            /** @description The type of the field changed. */
            readonly fieldtype?: string;
            /** @description The details of the original value. */
            readonly from?: string;
            /** @description The details of the original value as a string. */
            readonly fromString?: string;
            /** @description The details of the new value. */
            readonly to?: string;
            /** @description The details of the new value as a string. */
            readonly toString?: string;
        };
        /** @description A log of changes made to issue fields. Changelogs related to workflow associations are currently being deprecated. */
        Changelog: {
            /** @description The user who made the change. */
            readonly author?: components["schemas"]["UserDetails"];
            /**
             * Format: date-time
             * @description The date on which the change took place.
             */
            readonly created?: string;
            /** @description The history metadata associated with the changed. */
            readonly historyMetadata?: components["schemas"]["HistoryMetadata"];
            /** @description The ID of the changelog. */
            readonly id?: string;
            /** @description The list of items changed. */
            readonly items?: components["schemas"]["ChangeDetails"][];
        };
        ExpandPrioritySchemePage: {
            /** Format: int32 */
            maxResults?: number;
            /** Format: int64 */
            startAt?: number;
            /** Format: int64 */
            total?: number;
        } & {
            [key: string]: unknown;
        };
        /** @description Details about a field. */
        FieldDetails: {
            /** @description The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ). */
            clauseNames?: string[];
            /** @description Whether the field is a custom field. */
            custom?: boolean;
            /** @description The ID of the field. */
            id?: string;
            /** @description The key of the field. */
            key?: string;
            /** @description The name of the field. */
            name?: string;
            /** @description Whether the field can be used as a column on the issue navigator. */
            navigable?: boolean;
            /** @description Whether the content of the field can be used to order lists. */
            orderable?: boolean;
            /** @description The data schema for the field. */
            schema?: components["schemas"]["JsonTypeBean"];
            /** @description The scope of the field. */
            scope?: components["schemas"]["Scope"];
            /** @description Whether the content of the field can be searched. */
            searchable?: boolean;
        };
        /** @description The metadata describing an issue field. */
        FieldMetadata: {
            /** @description The list of values allowed in the field. */
            readonly allowedValues?: unknown[];
            /** @description The URL that can be used to automatically complete the field. */
            readonly autoCompleteUrl?: string;
            /** @description The configuration properties. */
            readonly configuration?: {
                [key: string]: unknown;
            };
            /** @description The default value of the field. */
            readonly defaultValue?: unknown;
            /** @description Whether the field has a default value. */
            readonly hasDefaultValue?: boolean;
            /** @description The key of the field. */
            readonly key: string;
            /** @description The name of the field. */
            readonly name: string;
            /** @description The list of operations that can be performed on the field. */
            readonly operations: string[];
            /** @description Whether the field is required. */
            readonly required: boolean;
            /** @description The data type of the field. */
            readonly schema: components["schemas"]["JsonTypeBean"];
        };
        /** @description Key fields from the linked issue. */
        Fields: {
            /** @description The assignee of the linked issue. */
            readonly assignee?: components["schemas"]["UserDetails"];
            /** @description The type of the linked issue. */
            readonly issueType?: components["schemas"]["IssueTypeDetails"];
            /** @description The type of the linked issue. */
            issuetype?: components["schemas"]["IssueTypeDetails"];
            /** @description The priority of the linked issue. */
            readonly priority?: components["schemas"]["Priority"];
            /** @description The status of the linked issue. */
            readonly status?: components["schemas"]["StatusDetails"];
            /** @description The summary description of the linked issue. */
            readonly summary?: string;
            /** @description The time tracking of the linked issue. */
            readonly timetracking?: components["schemas"]["TimeTrackingDetails"];
        };
        /** @description Details of issue history metadata. */
        HistoryMetadata: {
            /** @description The activity described in the history record. */
            activityDescription?: string;
            /** @description The key of the activity described in the history record. */
            activityDescriptionKey?: string;
            /** @description Details of the user whose action created the history record. */
            actor?: components["schemas"]["HistoryMetadataParticipant"];
            /** @description Details of the cause that triggered the creation the history record. */
            cause?: components["schemas"]["HistoryMetadataParticipant"];
            /** @description The description of the history record. */
            description?: string;
            /** @description The description key of the history record. */
            descriptionKey?: string;
            /** @description The description of the email address associated the history record. */
            emailDescription?: string;
            /** @description The description key of the email address associated the history record. */
            emailDescriptionKey?: string;
            /** @description Additional arbitrary information about the history record. */
            extraData?: {
                [key: string]: string;
            };
            /** @description Details of the system that generated the history record. */
            generator?: components["schemas"]["HistoryMetadataParticipant"];
            /** @description The type of the history record. */
            type?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details of user or system associated with a issue history metadata item. */
        HistoryMetadataParticipant: {
            /** @description The URL to an avatar for the user or system associated with a history record. */
            avatarUrl?: string;
            /** @description The display name of the user or system associated with a history record. */
            displayName?: string;
            /** @description The key of the display name of the user or system associated with a history record. */
            displayNameKey?: string;
            /** @description The ID of the user or system associated with a history record. */
            id?: string;
            /** @description The type of the user or system associated with a history record. */
            type?: string;
            /** @description The URL of the user or system associated with a history record. */
            url?: string;
        } & {
            [key: string]: unknown;
        };
        IncludedFields: {
            actuallyIncluded?: string[];
            excluded?: string[];
            included?: string[];
        };
        /** @description Details about an issue. */
        IssueBean: {
            /** @description Details of changelogs associated with the issue. */
            readonly changelog?: components["schemas"]["PageOfChangelogs"];
            /** @description The metadata for the fields on the issue that can be amended. */
            readonly editmeta?: components["schemas"]["IssueUpdateMetadata"];
            /** @description Expand options that include additional issue details in the response. */
            readonly expand?: string;
            fields?: {
                [key: string]: unknown;
            };
            fieldsToInclude?: components["schemas"]["IncludedFields"];
            /** @description The ID of the issue. */
            readonly id?: string;
            /** @description The key of the issue. */
            readonly key?: string;
            /** @description The ID and name of each field present on the issue. */
            readonly names?: {
                [key: string]: string;
            };
            /** @description The operations that can be performed on the issue. */
            readonly operations?: components["schemas"]["Operations"];
            /** @description Details of the issue properties identified in the request. */
            readonly properties?: {
                [key: string]: unknown;
            };
            /** @description The rendered value of each field present on the issue. */
            readonly renderedFields?: {
                [key: string]: unknown;
            };
            /** @description The schema describing each field present on the issue. */
            readonly schema?: {
                [key: string]: components["schemas"]["JsonTypeBean"];
            };
            /**
             * Format: uri
             * @description The URL of the issue details.
             */
            readonly self?: string;
            /** @description The transitions that can be performed on the issue. */
            readonly transitions?: components["schemas"]["IssueTransition"][];
            /** @description The versions of each field on the issue. */
            readonly versionedRepresentations?: {
                [key: string]: {
                    [key: string]: unknown;
                };
            };
        };
        /** @description Details of an issue transition. */
        IssueTransition: {
            /** @description Expand options that include additional transition details in the response. */
            readonly expand?: string;
            /** @description Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request. */
            readonly fields?: {
                [key: string]: components["schemas"]["FieldMetadata"];
            };
            /** @description Whether there is a screen associated with the issue transition. */
            readonly hasScreen?: boolean;
            /** @description The ID of the issue transition. Required when specifying a transition to undertake. */
            id?: string;
            /** @description Whether the transition is available to be performed. */
            readonly isAvailable?: boolean;
            /** @description Whether the issue has to meet criteria before the issue transition is applied. */
            readonly isConditional?: boolean;
            /** @description Whether the issue transition is global, that is, the transition is applied to issues regardless of their status. */
            readonly isGlobal?: boolean;
            /** @description Whether this is the initial issue transition for the workflow. */
            readonly isInitial?: boolean;
            looped?: boolean;
            /** @description The name of the issue transition. */
            readonly name?: string;
            /** @description Details of the issue status after the transition. */
            readonly to?: components["schemas"]["StatusDetails"];
        } & {
            [key: string]: unknown;
        };
        /** @description Details about an issue type. */
        IssueTypeDetails: {
            /**
             * Format: int64
             * @description The ID of the issue type's avatar.
             */
            readonly avatarId?: number;
            /** @description The description of the issue type. */
            readonly description?: string;
            /**
             * Format: uuid
             * @description Unique ID for next-gen projects.
             */
            readonly entityId?: string;
            /**
             * Format: int32
             * @description Hierarchy level of the issue type.
             */
            readonly hierarchyLevel?: number;
            /** @description The URL of the issue type's avatar. */
            readonly iconUrl?: string;
            /** @description The ID of the issue type. */
            readonly id?: string;
            /** @description The name of the issue type. */
            readonly name?: string;
            /** @description Details of the next-gen projects the issue type is available in. */
            readonly scope?: components["schemas"]["Scope"];
            /** @description The URL of these issue type details. */
            readonly self?: string;
            /** @description Whether this issue type is used to create subtasks. */
            readonly subtask?: boolean;
        };
        /** @description A list of editable field details. */
        IssueUpdateMetadata: {
            readonly fields?: {
                [key: string]: components["schemas"]["FieldMetadata"];
            };
        };
        /** @description The schema of a field. */
        JsonTypeBean: {
            /** @description If the field is a custom field, the configuration of the field. */
            readonly configuration?: {
                [key: string]: unknown;
            };
            /** @description If the field is a custom field, the URI of the field. */
            readonly custom?: string;
            /**
             * Format: int64
             * @description If the field is a custom field, the custom ID of the field.
             */
            readonly customId?: number;
            /** @description When the data type is an array, the name of the field items within the array. */
            readonly items?: string;
            /** @description If the field is a system field, the name of the field. */
            readonly system?: string;
            /** @description The data type of the field. */
            readonly type: string;
        };
        /** @description Details a link group, which defines issue operations. */
        LinkGroup: {
            groups?: components["schemas"]["LinkGroup"][];
            header?: components["schemas"]["SimpleLink"];
            id?: string;
            links?: components["schemas"]["SimpleLink"][];
            styleClass?: string;
            /** Format: int32 */
            weight?: number;
        };
        /** @description Details of the operations that can be performed on the issue. */
        Operations: {
            /** @description Details of the link groups defining issue operations. */
            readonly linkGroups?: components["schemas"]["LinkGroup"][];
        } & {
            [key: string]: unknown;
        };
        /** @description A page of changelogs. */
        PageOfChangelogs: {
            /** @description The list of changelogs. */
            readonly histories?: components["schemas"]["Changelog"][];
            /**
             * Format: int32
             * @description The maximum number of results that could be on the page.
             */
            readonly maxResults?: number;
            /**
             * Format: int32
             * @description The index of the first item returned on the page.
             */
            readonly startAt?: number;
            /**
             * Format: int32
             * @description The number of results on the page.
             */
            readonly total?: number;
        };
        /** @description An issue priority. */
        Priority: {
            /**
             * Format: int64
             * @description The avatarId of the avatar for the issue priority. This parameter is nullable and when set, this avatar references the universal avatar APIs.
             */
            avatarId?: number;
            /** @description The description of the issue priority. */
            description?: string;
            /** @description The URL of the icon for the issue priority. */
            iconUrl?: string;
            /** @description The ID of the issue priority. */
            id?: string;
            /** @description Whether this priority is the default. */
            isDefault?: boolean;
            /** @description The name of the issue priority. */
            name?: string;
            /** @description Priority schemes associated with the issue priority. */
            schemes?: components["schemas"]["ExpandPrioritySchemePage"];
            /** @description The URL of the issue priority. */
            self?: string;
            /** @description The color used to indicate the issue priority. */
            statusColor?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Details about a project. */
        ProjectDetails: {
            /** @description The URLs of the project's avatars. */
            readonly avatarUrls?: components["schemas"]["AvatarUrlsBean"];
            /** @description The ID of the project. */
            id?: string;
            /** @description The key of the project. */
            readonly key?: string;
            /** @description The name of the project. */
            readonly name?: string;
            /** @description The category the project belongs to. */
            readonly projectCategory?: components["schemas"]["UpdatedProjectCategory"];
            /**
             * @description The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
             * @enum {string}
             */
            readonly projectTypeKey?: "software" | "service_desk" | "business";
            /** @description The URL of the project details. */
            readonly self?: string;
            /** @description Whether or not the project is simplified. */
            readonly simplified?: boolean;
        };
        /** @description The projects the item is associated with. Indicated for items associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO). */
        Scope: {
            /** @description The project the item has scope in. */
            readonly project?: components["schemas"]["ProjectDetails"];
            /**
             * @description The type of scope.
             * @enum {string}
             */
            readonly type?: "PROJECT" | "TEMPLATE";
        } & {
            [key: string]: unknown;
        };
        /** @description The result of a JQL search with issues reconsilation. */
        SearchAndReconcileResults: {
            /** @description The list of issues found by the search or reconsiliation. */
            readonly issues?: components["schemas"]["IssueBean"][];
            /** @description The ID and name of each field in the search results. */
            readonly names?: {
                [key: string]: string;
            };
            /** @description Continuation token to fetch the next page. If this result represents the last or the only page this token will be null. This token will expire in 7 days. */
            readonly nextPageToken?: string;
            /** @description The schema describing the field types in the search results. */
            readonly schema?: {
                [key: string]: components["schemas"]["JsonTypeBean"];
            };
        };
        /** @description Details about the operations available in this version. */
        SimpleLink: {
            href?: string;
            iconClass?: string;
            id?: string;
            label?: string;
            styleClass?: string;
            title?: string;
            /** Format: int32 */
            weight?: number;
        };
        /** @description A status category. */
        StatusCategory: {
            /** @description The name of the color used to represent the status category. */
            readonly colorName?: string;
            /**
             * Format: int64
             * @description The ID of the status category.
             */
            readonly id?: number;
            /** @description The key of the status category. */
            readonly key?: string;
            /** @description The name of the status category. */
            readonly name?: string;
            /** @description The URL of the status category. */
            readonly self?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description A status. */
        StatusDetails: {
            /** @description The description of the status. */
            readonly description?: string;
            /** @description The URL of the icon used to represent the status. */
            readonly iconUrl?: string;
            /** @description The ID of the status. */
            readonly id?: string;
            /** @description The name of the status. */
            readonly name?: string;
            /** @description The scope of the field. */
            readonly scope?: components["schemas"]["Scope"];
            /** @description The URL of the status. */
            readonly self?: string;
            /** @description The category assigned to the status. */
            readonly statusCategory?: components["schemas"]["StatusCategory"];
        } & {
            [key: string]: unknown;
        };
        /** @description Time tracking details. */
        TimeTrackingDetails: {
            /** @description The original estimate of time needed for this issue in readable format. */
            readonly originalEstimate?: string;
            /**
             * Format: int64
             * @description The original estimate of time needed for this issue in seconds.
             */
            readonly originalEstimateSeconds?: number;
            /** @description The remaining estimate of time needed for this issue in readable format. */
            readonly remainingEstimate?: string;
            /**
             * Format: int64
             * @description The remaining estimate of time needed for this issue in seconds.
             */
            readonly remainingEstimateSeconds?: number;
            /** @description Time worked on this issue in readable format. */
            readonly timeSpent?: string;
            /**
             * Format: int64
             * @description Time worked on this issue in seconds.
             */
            readonly timeSpentSeconds?: number;
        };
        /** @description A project category. */
        UpdatedProjectCategory: {
            /** @description The name of the project category. */
            readonly description?: string;
            /** @description The ID of the project category. */
            readonly id?: string;
            /** @description The description of the project category. */
            readonly name?: string;
            /** @description The URL of the project category. */
            readonly self?: string;
        };
        /** @description User details permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
         *
         *      *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
         *      *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
         *      *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values. */
        UserDetails: {
            /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
            accountId?: string;
            /** @description The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user) */
            readonly accountType?: string;
            /** @description Whether the user is active. */
            readonly active?: boolean;
            /** @description The avatars of the user. */
            readonly avatarUrls?: components["schemas"]["AvatarUrlsBean"];
            /** @description The display name of the user. Depending on the user’s privacy settings, this may return an alternative value. */
            readonly displayName?: string;
            /** @description The email address of the user. Depending on the user’s privacy settings, this may be returned as null. */
            readonly emailAddress?: string;
            /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            readonly key?: string;
            /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
            readonly name?: string;
            /** @description The URL of the user. */
            readonly self?: string;
            /** @description The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null. */
            readonly timeZone?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getFields: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returned if the request is successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FieldDetails"][];
                };
            };
            /** @description Returned if the authentication credentials are incorrect or missing. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    searchAndReconsileIssuesUsingJql: {
        parameters: {
            query?: {
                /** @description A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. For performance reasons, this parameter requires a bounded query. A bounded query is a query with a search restriction.
                 *
                 *      *  Example of an unbounded query: `order by key desc`.
                 *      *  Example of a bounded query: `assignee = currentUser() order by key`.
                 *
                 *     Additionally, `orderBy` clause can contain a maximum of 7 fields. */
                jql?: string;
                /** @description The token for a page to fetch that is not the first page. The first page has a `nextPageToken` of `null`. Use the `nextPageToken` to fetch the next page of issues.
                 *
                 *     Note: The `nextPageToken` field is **not included** in the response for the last page, indicating there is no next page. */
                nextPageToken?: string;
                /** @description The maximum number of items to return per page. To manage page size, API may return fewer items per page where a large number of fields or properties are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only. It returns max 5000 issues. */
                maxResults?: number;
                /** @description A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
                 *
                 *      *  `*all` Returns all fields.
                 *      *  `*navigable` Returns navigable fields.
                 *      *  `id` Returns only issue IDs.
                 *      *  Any issue field, prefixed with a minus to exclude.
                 *
                 *     The default is `id`.
                 *
                 *     Examples:
                 *
                 *      *  `summary,comment` Returns only the summary and comments fields only.
                 *      *  `-description` Returns all navigable (default) fields except description.
                 *      *  `*all,-comment` Returns all fields except comments.
                 *
                 *     Multiple `fields` parameters can be included in a request.
                 *
                 *     Note: By default, this resource returns IDs only. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields. */
                fields?: string[];
                /** @description Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a comma-delimited string of values. The expand options are:
                 *
                 *      *  `renderedFields` Returns field values rendered in HTML format.
                 *      *  `names` Returns the display name of each field.
                 *      *  `schema` Returns the schema describing a field type.
                 *      *  `transitions` Returns all possible transitions for the issue.
                 *      *  `operations` Returns all possible operations for the issue.
                 *      *  `editmeta` Returns information about how each field can be edited.
                 *      *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
                 *      *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
                 *
                 *     Examples: `"names,changelog"` Returns the display name of each field as well as a list of recent updates to an issue. */
                expand?: string;
                /** @description A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list. */
                properties?: string[];
                /** @description Reference fields by their key (rather than ID). The default is `false`. */
                fieldsByKeys?: boolean;
                /** @description Fail this request early if we can't retrieve all field data. */
                failFast?: boolean;
                /** @description Strong consistency issue ids to be reconciled with search results. Accepts max 50 ids */
                reconcileIssues?: number[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returned if the request is successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchAndReconcileResults"];
                };
            };
            /** @description Returned if the search request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Returned if the authentication credentials are incorrect or missing. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
